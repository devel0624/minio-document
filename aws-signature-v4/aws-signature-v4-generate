#! /usr/bin/env bash

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'  # No Color

x_amz_content='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' # empty value, sha256
x_amz_date=$(date -u +"%Y%m%dT%H%M%SZ")
date_stamp=$(date -u +"%Y%m%d")
region=us-east-1
service=s3
termination_string=aws4_request
signed_headers="host;x-amz-content-sha256;x-amz-date"
algorithm='AWS4-HMAC-SHA256'

host=""
method=""
path=""
verbose=false

# 입력된 옵션 처리
while [[ $# -gt 0 ]]; do
    case "$1" in
        -host)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                host="$2"
                shift 2
            else
                echo "오류: -host 옵션에는 값이 필요합니다." >&2
                exit 1
            fi
            ;;
        -method)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                method=$(echo "$2" | tr '[:lower:]' '[:upper:]')  # 대문자로 변환
                shift 2
            else
                echo "오류: -method 옵션에는 값이 필요합니다." >&2
                exit 1
            fi
            ;;
        -path)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                path="$2"
                shift 2
            else
                echo "오류: -path 옵션에는 값이 필요합니다." >&2
                exit 1
            fi
            ;;
        -params)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                params="$2"
                shift 2
            else
                echo "오류: -params 옵션에는 값이 필요합니다." >&2
                exit 1
            fi
            ;;
        -v)
            verbose=true
            shift
            ;;
        *)
            echo "알 수 없는 옵션: $1" >&2
            exit 1
            ;;
    esac
done

# 필수 옵션 확인
if [[ -z "$host" || -z "$method" || -z "$path" ]]; then
    echo "❌ 오류: -host와 -method, -path 옵션은 필수입니다." >&2
    exit 1
fi

# access_key와 secret_key 입력
echo -e -n "${GREEN}Enter Access Key: ${NC}"
read -s access_key
echo

echo -e -n "${GREEN}Enter Secret Key: ${NC}"
read -s secret_key
echo

# Canonical Request
hashed_canonical_request=$(echo -n \
    "$method
$path
$params
host:$host
x-amz-content-sha256:$x_amz_content
x-amz-date:$x_amz_date

$signed_headers
$x_amz_content" |
    openssl dgst -sha256 -r | cut -d' ' -f1)

# Credential Scope
credential_scope="$date_stamp/$region/$service/$termination_string"

# String to Sign
string_to_sign="$algorithm
$x_amz_date
$credential_scope
$hashed_canonical_request"

# Aws Signature
algorithm_secret="AWS4"$secret_key
date_key=$(echo -n "$date_stamp" | openssl mac -digest sha256 -macopt key:$algorithm_secret HMAC)

date_region_key=$(echo -n "$region" | openssl mac -digest sha256 -macopt hexkey:$date_key HMAC)

date_region_service_key=$(echo -n "$service" | openssl mac -digest sha256 -macopt hexkey:$date_region_key HMAC)

signing_key=$(echo -n "$termination_string" | openssl mac -digest sha256 -macopt hexkey:$date_region_service_key HMAC)

signature=$(echo -n "$string_to_sign" | openssl mac -digest sha256 -macopt hexkey:$signing_key HMAC | tr 'A-F' 'a-f')

# Debug
if $verbose; then
    echo "##### Debug Section #####"

    echo "###### Request ######"

    echo -e "${YELLOW}Host: ${NC}$host"
    echo -e "${YELLOW}Method: ${NC}$method"
    echo -e "${YELLOW}Path: ${NC}$path"
    echo -e "${YELLOW}Params: ${NC}$params"

    echo "###### Security ######"

    masked_access_key=$(echo -n "$access_key" | sed -e 's/^\(.\).*\(.\)$/\1****\2/')
    echo -e "${YELLOW}Access: ${NC}$masked_access_key"
    masked_secret_key=$(echo -n "$secret_key" | sed -e 's/^\(.\).*\(.\)$/\1****\2/')
    echo -e "${YELLOW}Secret: ${NC}$masked_secret_key"

    echo "###### Authorization ######"

    echo -e "${YELLOW}x-amz-content-sha256: ${NC}$x_amz_content"
    echo -e "${YELLOW}x-amz-date: ${NC}$x_amz_date"
    echo -e "${YELLOW}Signed Headers: ${NC}$signed_headers"

    echo -e "${YELLOW}Algorithm: ${NC}$algorithm"
    
    echo -e "${YELLOW}Date Stamp: ${NC}$date_stamp"
    echo -e "${YELLOW}Region: ${NC}$region"
    echo -e "${YELLOW}Service: ${NC}$service"
    echo -e "${YELLOW}Termination String: ${NC}$termination_string"
    echo -e "${YELLOW}Credential Scope: ${NC}$credential_scope"

    echo "###### Signature ######"

    echo -e "${YELLOW}String to Sign: ${NC}$string_to_sign"
    masked_algorithm_secret=$(echo -n "$algorithm_secret" | sed -e 's/^\(.....\).*\(.\)$/\1****\2/')
    echo -e "${YELLOW}Algorithm Secret: ${NC}$masked_algorithm_secret"
    echo -e "${YELLOW}Date Key: ${NC}$date_key"
    echo -e "${YELLOW}Date Region Key: ${NC}$date_region_key"
    echo -e "${YELLOW}Date Region Service Key: ${NC}$date_region_service_key"
    echo -e "${YELLOW}Signing Key: ${NC}$signing_key"
    echo -e "${YELLOW}Signature: ${NC}$signature"

    echo "##### Debug Section #####"
    echo
fi

# Authorization 헤더 구성
echo -e "Authorization:$algorithm Credential=$access_key/$credential_scope, SignedHeaders=$signed_headers, Signature=$signature"
echo -e "X-Amz-Content-Sha256:$x_amz_content"
echo -e "X-Amz-Date:$x_amz_date"


